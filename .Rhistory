kseq <- seq(0, -1, by = -0.05)
##Create the number of transects to test
#function to get number of transects based distance between
n_trans <- function(orig_trans, orig_dist, new_dist){
(orig_dist/ new_dist )*orig_trans }
#number of transects (original 2km spacing, 1.5km, 1km)
#nseq <- c(length(unique(centcount$transect)),
#          as.integer(n_trans(orig_trans = length(unique(centcount$transect)), orig_dist = 2, new_dist = 1.5)),
#          as.integer(n_trans(orig_trans = length(unique(centcount$transect)), orig_dist = 2, new_dist = 1)))
#quite a lot of the surveys are missing transects, we want to assume they would get all (37)
nseq = c(37, 74, 99)
labs <- c("2km & 2 cameras", "2km & 4 cameras", "1.5km & 4 cameras")
#need to label the nseq input
names(nseq) <- labs
#can set to run on multiple species
Species <- c("S_GU", "S_KI", "S_GX", "S_HA")
#very round about way to make sure you don't get species not present error
#incent <- Species %in% names(centcount)
#sp.to.run <- c()
#for(i in 1:length(Species)){
#  test <- incent[i]
#  if(test == TRUE){sp.to.run <- append(sp.to.run, Species[i])}
#}
sp.to.run <- Species[Species %in% names(centcount)] # :-)
poweranalysis <- transect.pwr(CC = centcount, Species = sp.to.run, nseq = nseq,
kseq = kseq, t.space = 2, m=m, nr = nr, plot = TRUE,
by.density = T, alternative= "less")
transect.pwr <- function(CC,Species,nseq=NULL,t.space,kseq=seq(0,-1,by=-0.1),
nSim=10000,plot=TRUE,by.density=FALSE, alternative= "two.sided"){
## Load fonts for plot
extrafont::loadfonts(quiet = TRUE)
### Validation checks
### Check Cent Count
if(class(CC)[1]!="sf"){
stop("D'OH! Cent Count is not an sf object!")
}
if(!identical(names(CC)[1:4],c("seg_len","seg_area","transect","reel"))){
stop("Check that CC is actually a Cent Count shape file! Names do not match")
}
### Check Species
if(!all(Species %in% names(CC))){
stop("Species listed are not in the Cent Count")
}
### Check nseq
if(!all(nseq-floor(nseq)==0)){
stop("not all values of nseq are integers..")
}
### Check t.space
if(!is.numeric(t.space)){
stop("t.space is not numeric - input the spacing between transects")
}
## Convert to a CC
CCdf <- st_drop_geometry(CC)
## If nseq is null, then calculate a halving, 1.5 times, and a doubling
base <- length(unique(CC$transect))
if(is.null(nseq)){
half <- ceiling(base/2)
onepfive <- ceiling(base*1.5)
doub <- ceiling(base*2)
nseq <- c(half,base,onepfive,doub)
tspace <- c(round(t.space*2,2),t.space,round(t.space/1.5,2),round(t.space/2,2))
}
## Calculate the transect spacing and apply to the data frame for naming
#tspace <- round(length(unique(CC$transect))/nseq,2)*t.space
#labs <- paste0(tspace,"km")
#names(labs) <- nseq
labs <- names(nseq)
names(labs) <- nseq
## Get species labels from SppLookup
Species.Labels <- left_join(data.frame(BTO_CODE=substr(Species,3,4)), SppLookup,by="BTO_CODE")$Species
samplesize <- matrix(nrow=length(Species.Labels),ncol=3)
spec_count <- 1  ## Counter for building the samplesize matrix
finalall <- foreach(Spec=Species,.combine='rbind',.errorhandling='remove') %do% {
cat(Spec,"\n")
samplesize[spec_count,1] <- Species.Labels[spec_count]
cat("##################################################################\n")
## Select the species of interest and get the coordinates
CCsb <- CCdf %>% dplyr::select(transect,seg_area,all_of(Spec))
names(CCsb)[3] <- "Species"
### If doing by density, then change so Species column is a density
if(by.density==TRUE){ CCsb$Species <- CCsb$Species/CCsb$seg_area}
## Check number of transects with observations
summ <- CCsb %>% dplyr::group_by(transect) %>% summarise(total=sum(Species))
n.transects <- length(which(summ$total > 0))
cat(n.transects,"transects with observations \n")
samplesize[spec_count,3] <- n.transects
spec_count <- spec_count + 1
### Top level loops through transects (nseq)
final <- foreach(n=nseq,.combine='rbind',.errorhandling = "remove") %do% {
cat(n,"\n")
cat("###################################\n")
### Second level loops through effect size (kseq)
powervals <- foreach(k=kseq,.combine='rbind',.errorhandling = "remove")%do%{
cat(k,"\n")
cat("------------------\n")
sum_trns <- CCsb %>% group_by(transect) %>% summarise(extract =sum(Species)) %>% ungroup()
## The mean of these counts is the value of mu for rbinom
mu <- mean(sum_trns$extract)
## dispersion parameter (Theta)
CCmodnb <- glm(sum_trns$extract~1,family=quasipoisson)
## Calculate Theta
Theta <- sum(residuals(CCmodnb,type ="pearson")^2)/CCmodnb$df.residual
# simulate n*nSim transects
y <- rnbinom(n = n*nSim, mu = mu, size = mu/(Theta - 1))
y <- matrix(y, ncol = n)
if(k == 0){
k <- 0.00001
}
if(k == -1){
k <- -0.99999999
}
if(k == 1){
k <- 0.99999999
}
z <- rnbinom(n = n*nSim, mu = mu*(1+k), size = (mu*(1+k))/(Theta - 1))
z <- matrix(z, ncol = n)
#aply ks test to each row
allpvals <- sapply(1:nrow(y), function(i) ks.test(as.vector(y[i,]), as.vector(z[i,]),alternative = alternative)$p)
powr <- length(which(allpvals < 0.05))/length(allpvals)
powr
effectsiz <- k
df <- data.frame(power=powr,effectsz=round(k,2))
}
powervals$ntrans <- n
return(powervals)
}
final$ntrans <- as.factor(final$ntrans)
final$species <- Spec
return(final)
}
## Create a plot
G <- ggplot(finalall) +
geom_line(aes(x=effectsz*100,y=power,group=species,color=species),linewidth=1.5)+
geom_hline(aes(yintercept=0.8),linetype='dashed',size=1)+
scale_color_brewer(palette = "Dark2",name="",
labels=Species.Labels)+
xlab("% change") +
ylab("Power")+
facet_wrap(~ntrans,labeller = as_labeller(labs))+
HiDef::Theme_HiDEF(axis_title_size = 16)+
theme(legend.text = element_text(size=14))
if(plot==TRUE){
G
}
samplesize <- data.frame(samplesize)
names(samplesize) <- c("Species","N Observations", "N transects with Obs")
outlist <- list(plotobj=G,powervals=finalall,samplesize=samplesize)
return(outlist)
}
proj.fold <- "R:/Consultancy/HC00001 - Projects/HC0063 - SSE Berwick Bank Consultancy/Deliverables/1_Baseline/CentCount_Shapefiles_210322/CentCount_Shapefiles_210322"
surv.folds <- list.files(proj.fold)
surv.folds <- surv.folds[grep(pattern = ".shp", surv.folds)]
#For the run it for every month part
plot.list <- list()
results <- list()
for(s in 1:1){
#get the path to the centcount
centcount <- paste0(proj.fold, "/", surv.folds[s])
centcount <- st_read(centcount)
##Number of transect samples
m <- 5 #I'd like to try with 10 but its taking too long
##Number of replicates
nr <- 200
## Create the sequences of the proportion decline population (effect size)
kseq <- seq(0, -1, by = -0.10)
##Create the number of transects to test
#function to get number of transects based distance between
n_trans <- function(orig_trans, orig_dist, new_dist){
(orig_dist/ new_dist )*orig_trans }
#number of transects (original 2km spacing, 1.5km, 1km)
#nseq <- c(length(unique(centcount$transect)),
#          as.integer(n_trans(orig_trans = length(unique(centcount$transect)), orig_dist = 2, new_dist = 1.5)),
#          as.integer(n_trans(orig_trans = length(unique(centcount$transect)), orig_dist = 2, new_dist = 1)))
#quite a lot of the surveys are missing transects, we want to assume they would get all (37)
nseq = c(37, 74, 99)
labs <- c("2km & 2 cameras", "2km & 4 cameras", "1.5km & 4 cameras")
#need to label the nseq input
names(nseq) <- labs
#can set to run on multiple species
Species <- c("S_GU", "S_KI", "S_GX", "S_HA")
#very round about way to make sure you don't get species not present error
#incent <- Species %in% names(centcount)
#sp.to.run <- c()
#for(i in 1:length(Species)){
#  test <- incent[i]
#  if(test == TRUE){sp.to.run <- append(sp.to.run, Species[i])}
#}
sp.to.run <- Species[Species %in% names(centcount)] # :-)
poweranalysis <- transect.pwr(CC = centcount, Species = sp.to.run, nseq = nseq,
kseq = kseq, t.space = 2, nSim=2000, plot = TRUE,
by.density = T, alternative= "less")
plot.list[[s]] <- poweranalysis$plotobj
poweranalysis$powervals$survey <- surv.folds[s]
results[[s]] <- poweranalysis$powervals
}
library(HiDef)
transect.pwr <- function(CC,Species,nseq=NULL,t.space,kseq=seq(0,-1,by=-0.1),
nSim=10000,plot=TRUE,by.density=FALSE, alternative= "two.sided"){
## Load fonts for plot
extrafont::loadfonts(quiet = TRUE)
### Validation checks
### Check Cent Count
if(class(CC)[1]!="sf"){
stop("D'OH! Cent Count is not an sf object!")
}
if(!identical(names(CC)[1:4],c("seg_len","seg_area","transect","reel"))){
stop("Check that CC is actually a Cent Count shape file! Names do not match")
}
### Check Species
if(!all(Species %in% names(CC))){
stop("Species listed are not in the Cent Count")
}
### Check nseq
if(!all(nseq-floor(nseq)==0)){
stop("not all values of nseq are integers..")
}
### Check t.space
if(!is.numeric(t.space)){
stop("t.space is not numeric - input the spacing between transects")
}
## Convert to a CC
CCdf <- st_drop_geometry(CC)
## If nseq is null, then calculate a halving, 1.5 times, and a doubling
base <- length(unique(CC$transect))
if(is.null(nseq)){
half <- ceiling(base/2)
onepfive <- ceiling(base*1.5)
doub <- ceiling(base*2)
nseq <- c(half,base,onepfive,doub)
tspace <- c(round(t.space*2,2),t.space,round(t.space/1.5,2),round(t.space/2,2))
}
## Calculate the transect spacing and apply to the data frame for naming
#tspace <- round(length(unique(CC$transect))/nseq,2)*t.space
#labs <- paste0(tspace,"km")
#names(labs) <- nseq
labs <- names(nseq)
names(labs) <- nseq
## Get species labels from SppLookup
Species.Labels <- left_join(data.frame(BTO_CODE=substr(Species,3,4)), SppLookup,by="BTO_CODE")$Species
samplesize <- matrix(nrow=length(Species.Labels),ncol=3)
spec_count <- 1  ## Counter for building the samplesize matrix
finalall <- foreach(Spec=Species,.combine='rbind',.errorhandling='remove') %do% {
cat(Spec,"\n")
samplesize[spec_count,1] <- Species.Labels[spec_count]
cat("##################################################################\n")
## Select the species of interest and get the coordinates
CCsb <- CCdf %>% dplyr::select(transect,seg_area,all_of(Spec))
names(CCsb)[3] <- "Species"
### If doing by density, then change so Species column is a density
if(by.density==TRUE){ CCsb$Species <- CCsb$Species/CCsb$seg_area}
## Check number of transects with observations
summ <- CCsb %>% dplyr::group_by(transect) %>% summarise(total=sum(Species))
n.transects <- length(which(summ$total > 0))
cat(n.transects,"transects with observations \n")
samplesize[spec_count,3] <- n.transects
spec_count <- spec_count + 1
### Top level loops through transects (nseq)
final <- foreach(n=nseq,.combine='rbind',.errorhandling = "remove") %do% {
cat(n,"\n")
cat("###################################\n")
### Second level loops through effect size (kseq)
powervals <- foreach(k=kseq,.combine='rbind',.errorhandling = "remove")%do%{
cat(k,"\n")
cat("------------------\n")
sum_trns <- CCsb %>% group_by(transect) %>% summarise(extract =sum(Species)) %>% ungroup()
## The mean of these counts is the value of mu for rbinom
mu <- mean(sum_trns$extract)
## dispersion parameter (Theta)
CCmodnb <- glm(sum_trns$extract~1,family=quasipoisson)
## Calculate Theta
Theta <- sum(residuals(CCmodnb,type ="pearson")^2)/CCmodnb$df.residual
# simulate n*nSim transects
y <- rnbinom(n = n*nSim, mu = mu, size = mu/(Theta - 1))
y <- matrix(y, ncol = n)
if(k == 0){
k <- 0.00001
}
if(k == -1){
k <- -0.99999999
}
if(k == 1){
k <- 0.99999999
}
z <- rnbinom(n = n*nSim, mu = mu*(1+k), size = (mu*(1+k))/(Theta - 1))
z <- matrix(z, ncol = n)
#aply ks test to each row
allpvals <- sapply(1:nrow(y), function(i) ks.test(as.vector(y[i,]), as.vector(z[i,]),alternative = alternative)$p)
powr <- length(which(allpvals < 0.05))/length(allpvals)
powr
effectsiz <- k
df <- data.frame(power=powr,effectsz=round(k,2))
}
powervals$ntrans <- n
return(powervals)
}
final$ntrans <- as.factor(final$ntrans)
final$species <- Spec
return(final)
}
## Create a plot
G <- ggplot(finalall) +
geom_line(aes(x=effectsz*100,y=power,group=species,color=species),linewidth=1.5)+
geom_hline(aes(yintercept=0.8),linetype='dashed',size=1)+
scale_color_brewer(palette = "Dark2",name="",
labels=Species.Labels)+
xlab("% change") +
ylab("Power")+
facet_wrap(~ntrans,labeller = as_labeller(labs))+
HiDef::Theme_HiDEF(axis_title_size = 16)+
theme(legend.text = element_text(size=14))
if(plot==TRUE){
G
}
samplesize <- data.frame(samplesize)
names(samplesize) <- c("Species","N Observations", "N transects with Obs")
outlist <- list(plotobj=G,powervals=finalall,samplesize=samplesize)
return(outlist)
}
proj.fold <- "R:/Consultancy/HC00001 - Projects/HC0063 - SSE Berwick Bank Consultancy/Deliverables/1_Baseline/CentCount_Shapefiles_210322/CentCount_Shapefiles_210322"
surv.folds <- list.files(proj.fold)
surv.folds <- surv.folds[grep(pattern = ".shp", surv.folds)]
#For the run it for every month part
plot.list <- list()
results <- list()
for(s in 1:1){
#get the path to the centcount
centcount <- paste0(proj.fold, "/", surv.folds[s])
centcount <- st_read(centcount)
##Number of transect samples
m <- 5 #I'd like to try with 10 but its taking too long
##Number of replicates
nr <- 200
## Create the sequences of the proportion decline population (effect size)
kseq <- seq(0, -1, by = -0.10)
##Create the number of transects to test
#function to get number of transects based distance between
n_trans <- function(orig_trans, orig_dist, new_dist){
(orig_dist/ new_dist )*orig_trans }
#number of transects (original 2km spacing, 1.5km, 1km)
#nseq <- c(length(unique(centcount$transect)),
#          as.integer(n_trans(orig_trans = length(unique(centcount$transect)), orig_dist = 2, new_dist = 1.5)),
#          as.integer(n_trans(orig_trans = length(unique(centcount$transect)), orig_dist = 2, new_dist = 1)))
#quite a lot of the surveys are missing transects, we want to assume they would get all (37)
nseq = c(37, 74, 99)
labs <- c("2km & 2 cameras", "2km & 4 cameras", "1.5km & 4 cameras")
#need to label the nseq input
names(nseq) <- labs
#can set to run on multiple species
Species <- c("S_GU", "S_KI", "S_GX", "S_HA")
#very round about way to make sure you don't get species not present error
#incent <- Species %in% names(centcount)
#sp.to.run <- c()
#for(i in 1:length(Species)){
#  test <- incent[i]
#  if(test == TRUE){sp.to.run <- append(sp.to.run, Species[i])}
#}
sp.to.run <- Species[Species %in% names(centcount)] # :-)
poweranalysis <- transect.pwr(CC = centcount, Species = sp.to.run, nseq = nseq,
kseq = kseq, t.space = 2, nSim=2000, plot = TRUE,
by.density = T, alternative= "less")
plot.list[[s]] <- poweranalysis$plotobj
poweranalysis$powervals$survey <- surv.folds[s]
results[[s]] <- poweranalysis$powervals
}
poweranalysis$plotobj
results[[s]]
poweranalysis$plotobj
#sort the tables
for(r in 1:length(results)){
temp <- results[[r]] #%>%
#filter(effectsz <= 0.8)
if(r == 1){form.results <- temp}else{form.results <- rbind(form.results, temp)}
}
final.results <- form.results %>%
relocate(c("survey", "species", "ntrans", "effectsz"), before = "power")
final.results$test <- case_when(final.results$before >= 0.8 ~ "yes",
final.results$before < 0.8 ~ "no")
final.results$survey <- case_when(final.results$survey == "Zone85_M01_S01_D01_20_App_Output-CentCount.shp" ~ "M01_S01_D01_20",
final.results$survey == "Zone85_M01_S02_D01_21_App_Output-CentCount.shp" ~ "M01_S02_D01_22",
final.results$survey == "Zone85_M02_S01_D01_20_App_Output-CentCount.shp" ~ "M02_S01_D01_20",
final.results$survey == "Zone85_M02_S01_D01_21_App_Output-CentCount.shp" ~ "M02_S01_D01_21",
final.results$survey == "Zone85_M03_S01_D01_19_App_Output-CentCount.shp" ~ "M03_S01_D01_19",
final.results$survey == "Zone85_M03_S01_D01_20_App_Output-CentCount.shp" ~ "M03_S01_D01_20",
final.results$survey == "Zone85_M04_S01_D01_21_App_Output-CentCount.shp" ~ "M04_S01_D01_21",
final.results$survey == "Zone85_M04_S02_D01_21_App_Output-CentCount.shp" ~ "M04_S02_D01_21",
final.results$survey == "Zone85_M05_S01_D01_19_App_Output-CentCount.shp" ~ "M05_S01_D01_19",
final.results$survey == "Zone85_M05_S01_D01_20_App_Output-CentCount.shp" ~ "M05_S01_D01_20",
final.results$survey == "Zone85_M05_S02_D01_20_App_Output-CentCount.shp" ~ "M05_S02_D01_20",
final.results$survey == "Zone85_M06_S01_D01_20_App_Output-CentCount.shp" ~ "M06_S01_D01_20",
final.results$survey == "Zone85_M06_S01_D01_19_App_Output-CentCount.shp" ~ "M06_S01_D01_19",
final.results$survey == "Zone85_M07_S01_D01_19_App_Output-CentCount.shp" ~ "M07_S01_D01_19",
final.results$survey == "Zone85_M07_S01_D01_20_App_Output-CentCount.shp" ~ "M07_S01_D01_20",
final.results$survey == "Zone85_M08_S01_D01_19_App_Output-CentCount.shp" ~ "M08_S01_D01_19",
final.results$survey == "Zone85_M08_S01_D01_20_App_Output-CentCount.shp" ~ "M08_S01_D01_20",
final.results$survey == "Zone85_M09_S01_D01_19_App_Output-CentCount.shp" ~ "M09_S01_D01_19",
final.results$survey == "Zone85_M09_S01_D01_20_App_Output-CentCount.shp" ~ "M09_S01_D01_20",
final.results$survey == "Zone85_M10_S01_D01_19_App_Output-CentCount.shp" ~ "M10_S01_D01_19",
final.results$survey == "Zone85_M10_S01_D01_20_App_Output-CentCount.shp" ~ "M10_S01_D01_20",
final.results$survey == "Zone85_M11_S01_D01_19_App_Output-CentCount.shp" ~ "M11_S01_D01_19",
final.results$survey == "Zone85_M11_S01_D01_20_App_Output-CentCount.shp" ~ "M11_S01_D01_20",
final.results$survey == "Zone85_M12_S01_D01_19_App_Output-CentCount.shp" ~ "M12_S01_D01_19",
final.results$survey == "Zone85_M12_S01_D01_20_App_Output-CentCount.shp" ~ "M12_S01_D01_20",)
names(final.results) <- c("Survey", "Species", "Number of transects", "Change in population",
"Power to detect change", "Enough power?")
final.list <- list("Guillemot" = final.results %>% filter(Species == "S_GU"),
"Kittiwake" = final.results %>% filter(Species == "S_KI"),
"Gannet" = final.results %>% filter(Species == "S_GX"),
"Harbour porpoise" = final.results %>% filter(Species == "S_HA"))
final.list$Guillemot
devtools::document
devtools::document()
rm(list = c("transect.pwr"))
library(HiDef)
devtools::document()
sum_trns <- CCsb %>% group_by(transect) %>% summarise(extract =sum(Species)) %>% ungroup()
CC
CC = centcount
Species = sp.to.run
## Load fonts for plot
extrafont::loadfonts(quiet = TRUE)
### Check Cent Count
if(class(CC)[1]!="sf"){
stop("D'OH! Cent Count is not an sf object!")
}
if(!identical(names(CC)[1:4],c("seg_len","seg_area","transect","reel"))){
stop("Check that CC is actually a Cent Count shape file! Names do not match")
}
### Check Species
if(!all(Species %in% names(CC))){
stop("Species listed are not in the Cent Count")
}
### Check nseq
if(!all(nseq-floor(nseq)==0)){
stop("not all values of nseq are integers..")
}
### Check t.space
if(!is.numeric(t.space)){
stop("t.space is not numeric - input the spacing between transects")
}
## Convert to a CC
CCdf <- st_drop_geometry(CC)
## If nseq is null, then calculate a halving, 1.5 times, and a doubling
base <- length(unique(CC$transect))
if(is.null(nseq)){
half <- ceiling(base/2)
onepfive <- ceiling(base*1.5)
doub <- ceiling(base*2)
nseq <- c(half,base,onepfive,doub)
tspace <- c(round(t.space*2,2),t.space,round(t.space/1.5,2),round(t.space/2,2))
}
## Calculate the transect spacing and apply to the data frame for naming
#tspace <- round(length(unique(CC$transect))/nseq,2)*t.space
#labs <- paste0(tspace,"km")
#names(labs) <- nseq
labs <- names(nseq)
names(labs) <- nseq
## Get species labels from SppLookup
Species.Labels <- left_join(data.frame(BTO_CODE=substr(Species,3,4)), SppLookup,by="BTO_CODE")$Species
samplesize <- matrix(nrow=length(Species.Labels),ncol=3)
spec_count <- 1  ## Counter for building the samplesize matrix
Spec =Species[1]
cat(Spec,"\n")
samplesize[spec_count,1] <- Species.Labels[spec_count]
cat("##################################################################\n")
## Select the species of interest and get the coordinates
CCsb <- CCdf %>% dplyr::select(transect,seg_area,all_of(Spec))
names(CCsb)[3] <- "Species"
### If doing by density, then change so Species column is a density
if(by.density==TRUE){ CCsb$Species <- CCsb$Species/CCsb$seg_area}
CCsb$Species <- CCsb$Species/CCsb$seg_area
## Check number of transects with observations
summ <- CCsb %>% dplyr::group_by(transect) %>% summarise(total=sum(Species))
n.transects <- length(which(summ$total > 0))
## Check number of transects with observations
summ <- CCsb %>% dplyr::group_by(transect) %>% summarise(total=sum(Species))
n.transects <- length(which(summ$total > 0))
cat(n.transects,"transects with observations \n")
summ
CCsb$seg_area
## Select the species of interest and get the coordinates
CCsb <- CCdf %>% dplyr::select(transect,seg_area,all_of(Spec))
names(CCsb)[3] <- "Species"
CCsb$Species
CCsb$Species <- CCsb$Species/CCsb$seg_area
CCsb$Species
## Check number of transects with observations
summ <- CCsb %>% dplyr::group_by(transect) %>% summarise(total=sum(Species))
n.transects <- length(which(summ$total > 0))
cat(n.transects,"transects with observations \n")
samplesize[spec_count,3] <- n.transects
spec_count <- spec_count + 1
nseq
n
n=nseq[1]
cat(n,"\n")
cat("###################################\n")
kseq
k=-0.2
cat(k,"\n")
cat("------------------\n")
## get sum counts for each transect
sum_trns <- CCsb %>% group_by(transect) %>% summarise(extract =sum(Species)) %>% ungroup()
sum_trns
## The mean of these counts is the value of mu for rbinom
mu <- mean(sum_trns$extract)
## dispersion parameter (Theta)
CCmodnb <- glm(sum_trns$extract~1,family=quasipoisson)
## Calculate Theta
Theta <- sum(residuals(CCmodnb,type ="pearson")^2)/CCmodnb$df.residual
# simulate n*nSim transects
y <- rnbinom(n = n*nSim, mu = mu, size = mu/(Theta - 1))
y <- matrix(y, ncol = n)
