scale_x_continuous(limits=c(0.975,1.025))+
xlab("")
ggplot(x)+
geom_errorbar(aes(ymin=ymin,ymax=ymax,x=x),width=0,size=2,colour='lightblue')+
geom_point(aes(x=x,y=y))+
ylab("Height above MSL (m)")+
Theme_HiDEF(axis_title_size = 18)+
scale_y_continuous(limits=c(0,50))+
scale_x_continuous(limits=c(0.975,1.025))+
xlab("")
ggplot(x)+
geom_errorbar(aes(ymin=ymin,ymax=ymax,x=x),width=0,size=2,colour='lightblue')+
geom_point(aes(x=x,y=y))+
ylab("Height above MSL (m)")+
Theme_HiDEF(axis_title_size = 18)+
scale_y_continuous(limits=c(0,50))+
scale_x_continuous(limits=c(0.975,1.025),values=c())+
xlab("")
ggplot(x)+
geom_errorbar(aes(ymin=ymin,ymax=ymax,x=x),width=0,size=2,colour='lightblue')+
geom_point(aes(x=x,y=y))+
ylab("Height above MSL (m)")+
Theme_HiDEF(axis_title_size = 18)+
scale_y_continuous(limits=c(0,50))+
scale_x_continuous(limits=c(0.975,1.025),breaks=c())+
xlab("")
ggplot(x)+
geom_errorbar(aes(ymin=ymin,ymax=ymax,x=x),width=0,size=2,colour='lightblue')+
geom_point(aes(x=x,y=y))+
ylab("Height above MSL (m)")+
Theme_HiDEF(axis_title_size = 18)+
scale_y_continuous(limits=c(0,50))+
scale_x_continuous(limits=c(0.975,1.025),breaks=c())+
geom_hline(aes(y = 0),size=2)+
xlab("")
ggplot(x)+
geom_errorbar(aes(ymin=ymin,ymax=ymax,x=x),width=0,size=2,colour='lightblue')+
geom_point(aes(x=x,y=y))+
ylab("Height above MSL (m)")+
Theme_HiDEF(axis_title_size = 18)+
scale_y_continuous(limits=c(0,50))+
scale_x_continuous(limits=c(0.975,1.025),breaks=c())+
geom_hline(aes(yintercept = 0),size=2)+
xlab("")
ggplot(x)+
geom_errorbar(aes(ymin=ymin,ymax=ymax,x=x),width=0,size=2,colour='lightblue')+
geom_point(aes(x=x,y=y))+
ylab("Height above MSL (m)")+
Theme_HiDEF(axis_title_size = 18,axis_title_family = "Arial")+
scale_y_continuous(limits=c(0,50))+
scale_x_continuous(limits=c(0.975,1.025),breaks=c())+
geom_hline(aes(yintercept = 0),size=2)+
xlab("")
ggplot(x)+
geom_errorbar(aes(ymin=ymin,ymax=ymax,x=x),width=0,size=4,colour='lightblue')+
geom_point(aes(x=x,y=y))+
ylab("Height above MSL (m)")+
Theme_HiDEF(axis_title_size = 18,axis_title_family = "Arial")+
scale_y_continuous(limits=c(0,50))+
scale_x_continuous(limits=c(0.975,1.025),breaks=c())+
geom_hline(aes(yintercept = 0),size=2)+
xlab("")
ggplot(x)+
geom_errorbar(aes(ymin=ymin,ymax=ymax,x=x),width=0,size=8,colour='lightblue')+
geom_point(aes(x=x,y=y))+
ylab("Height above MSL (m)")+
Theme_HiDEF(axis_title_size = 18,axis_title_family = "Arial")+
scale_y_continuous(limits=c(0,50))+
scale_x_continuous(limits=c(0.975,1.025),breaks=c())+
geom_hline(aes(yintercept = 0),size=2)+
xlab("")
X <- data.frame(x=runif(100),y=runif(100))
ggplot(X,aes(x=x,y=y))+Theme_HiDEF()
Theme_HiDEF <- function (base_family = "Gill Sans MT", base_size = 11.5, plot_title_family = base_family,
plot_title_size = 18, plot_title_face = "bold", plot_title_margin = 10,
subtitle_family = base_family, subtitle_size = 12, subtitle_face = "plain",
subtitle_margin = 15, strip_text_family = base_family, strip_text_size = 12,
strip_text_face = "plain", caption_family = base_family,
caption_size = 9, caption_face = "italic", caption_margin = 10,
axis_text_size = base_size, axis_title_family = subtitle_family,
axis_title_size = 9, axis_title_face = "plain", axis_title_just = "rt",
plot_margin = margin(30, 30, 30, 30), grid_col = "#cccccc",
grid = TRUE, axis_col = "#cccccc", axis = FALSE, ticks = FALSE)
{
ret <- ggplot2::theme_minimal(base_family = base_family,
base_size = base_size)
ret <- ret + theme(legend.background = element_blank())
ret <- ret + theme(legend.key = element_blank())
if (inherits(grid, "character") | grid == TRUE) {
ret <- ret + theme(panel.grid = element_line(color = grid_col,
size = 0.2))
ret <- ret + theme(panel.grid.major = element_line(color = grid_col,
size = 0.2))
ret <- ret + theme(panel.grid.minor = element_line(color = grid_col,
size = 0.15))
if (inherits(grid, "character")) {
if (regexpr("X", grid)[1] < 0)
ret <- ret + theme(panel.grid.major.x = element_blank())
if (regexpr("Y", grid)[1] < 0)
ret <- ret + theme(panel.grid.major.y = element_blank())
if (regexpr("x", grid)[1] < 0)
ret <- ret + theme(panel.grid.minor.x = element_blank())
if (regexpr("y", grid)[1] < 0)
ret <- ret + theme(panel.grid.minor.y = element_blank())
}
}
else {
ret <- ret + theme(panel.grid = element_blank())
}
if (inherits(axis, "character") | axis == TRUE) {
ret <- ret + theme(axis.line = element_line(color = "#2b2b2b",
size = 0.15))
if (inherits(axis, "character")) {
axis <- tolower(axis)
if (regexpr("x", axis)[1] < 0) {
ret <- ret + theme(axis.line.x = element_blank())
}
else {
ret <- ret + theme(axis.line.x = element_line(color = axis_col,
size = 0.15))
}
if (regexpr("y", axis)[1] < 0) {
ret <- ret + theme(axis.line.y = element_blank())
}
else {
ret <- ret + theme(axis.line.y = element_line(color = axis_col,
size = 0.15))
}
}
else {
ret <- ret + theme(axis.line.x = element_line(color = axis_col,
size = 0.15))
ret <- ret + theme(axis.line.y = element_line(color = axis_col,
size = 0.15))
}
}
else {
ret <- ret + theme(axis.line = element_blank())
}
if (!ticks) {
ret <- ret + theme(axis.ticks = element_blank())
ret <- ret + theme(axis.ticks.x = element_blank())
ret <- ret + theme(axis.ticks.y = element_blank())
}
else {
ret <- ret + theme(axis.ticks = element_line(size = 0.15))
ret <- ret + theme(axis.ticks.x = element_line(size = 0.15))
ret <- ret + theme(axis.ticks.y = element_line(size = 0.15))
ret <- ret + theme(axis.ticks.length = grid::unit(5,
"pt"))
}
xj <- switch(tolower(substr(axis_title_just, 1, 1)), b = 0,
l = 0, m = 0.5, c = 0.5, r = 1, t = 1)
yj <- switch(tolower(substr(axis_title_just, 2, 2)), b = 0,
l = 0, m = 0.5, c = 0.5, r = 1, t = 1)
ret <- ret + theme(axis.text.x = element_text(size = axis_text_size,
margin = margin(t = 0)))
ret <- ret + theme(axis.text.y = element_text(size = axis_text_size,
margin = margin(r = 0)))
ret <- ret + theme(axis.title = element_text(size = axis_title_size,
family = axis_title_family))
ret <- ret + theme(axis.title.x = element_text(hjust = xj,
size = axis_title_size, family = axis_title_family,
face = axis_title_face))
ret <- ret + theme(axis.title.y = element_text(hjust = 0.5, vjust = 5,
size = axis_title_size, family = axis_title_family,
face = axis_title_face))
ret <- ret + theme(axis.title.y.right = element_text(hjust = yj,
size = axis_title_size, angle = 90, family = axis_title_family,
face = axis_title_face))
ret <- ret + theme(strip.text = element_text(hjust = 0,
size = strip_text_size,face="bold",
family = strip_text_family, color = "black"))
ret <- ret + theme(panel.spacing = grid::unit(2, "lines"))
ret <- ret + theme(plot.title = element_text(hjust = 0,
size = plot_title_size, margin = margin(b = plot_title_margin),
family = plot_title_family, face = plot_title_face))
ret <- ret + theme(plot.subtitle = element_text(hjust = 0,
size = subtitle_size, margin = margin(b = subtitle_margin),
family = subtitle_family, face = subtitle_face))
ret <- ret + theme(plot.caption = element_text(hjust = 1,
size = caption_size, margin = margin(t = caption_margin),
family = caption_family, face = caption_face))
ret <- ret + theme(plot.margin = plot_margin)
ret <- ret + theme(strip.background = element_rect(color = "black", fill = "lightgrey"))
ret
}
ggplot(X,aes(x=x,y=y))+Theme_HiDEF()
ggplot(X,aes(x=x,y=y))+geom_point()+Theme_HiDEF()
devtools::document()
remove(Theme_HiDEF())
remove(Theme_HiDEF
)
devtools::document()
devtools::document()
??Theme_HiDEF
View(X)
remove(X)
?Theme_HiDEF
library(HiDef)
devtools::document()
usethis::use_package(sp)
usethis::use_package("sp")
usethis::use_package("sf")
usethis::use_package("tidyverse")
usethis::use_package("ggplot2")
devtools::document()
library(HiDef)
devtools::install_github("https://github.com/HiDef-Aerial-Surveying/HiDEF.git")
detach("package:HiDef", unload = TRUE)
devtools::install_github("https://github.com/HiDef-Aerial-Surveying/HiDEF.git")
remove.packages("HiDef")
devtools::document()
library(HiDef)
remove.packages("HiDef")
devtools::install_github("https://github.com/HiDef-Aerial-Surveying/HiDEF.git")
remove.packages("HiDef")
devtools::install_github("https://github.com/HiDef-Aerial-Surveying/HiDEF.git")
devtools::install_github("https://github.com/HiDef-Aerial-Surveying/HiDEF.git")
library(HiDef)
hidefred
devtools::document()
library(HiDef)
hidefblue
hidefred
library(HiDef)
HiDef::not_na()
not_na
not_na()
devtools
devtools::document()
library(HiDef)
not_null()
devtools::document()
library(HiDef)
library(HiDef)
not_null()
devtools::document()
library(HiDef)
not_na()
setwd("R:/Projects/HP00000 - Projects/HP00158 - Urban Gulls South Wales Cardiff/500 - Data Processing/2021 - Month 05 - Survey 01/GPS/Streampix/D01/C1/Set 1")
fls <- list.files()
fls
read.table(fls[1])
tabdat <- read.table(fls[1])
library(sp)
library(raster)
library(sf)
WGS84 <- st_crs(4326)$proj4string
wd <- "R:/Projects/HP00000 - Projects/HP00158 - Urban Gulls South Wales Cardiff/500 - Data Processing/2021 - Month 05 - Survey 01/GPS/Streampix/D01/C1/Set 1"
od <- "R:/Projects/HP00000 - Projects/HP00158 - Urban Gulls South Wales Cardiff/500 - Data Processing/2021 - Month 05 - Survey 01/GPS/Streampix/D01/C1/Set1Shapes"
setwd(wd)
coordinates(tabdat) <- ~V3+V2
tabdat <- read.table(fls[1],sep = ",")
coordinates(tabdat) <- ~V3+V2
projection(tabdat) <- WGS84
strsplit(fls[1],"/")
strsplit(fls[1],".txt")
strsplit(fls[1],".txt")[[1]]
paste0(strsplit(fls[1],".txt")[[1]],".shp")
paste0(od,"/",strsplit(fls[1],".txt")[[1]],".shp")
shapefile(tabdat,filename=outfile,overwrite=TRUE)
outfile <- paste0(od,"/",strsplit(fls[1],".txt")[[1]],".shp")
shapefile(tabdat,filename=outfile,overwrite=TRUE)
tabdat <- read.table(fls[1],sep = ",")
coordinates(tabdat) <- ~V3+V2
projection(tabdat) <- WGS84
outfile <- paste0(od,"/",strsplit(fls[1],".txt")[[1]],".shp")
shapefile(tabdat,filename=outfile,overwrite=TRUE)
shapefile(tabdat,filename=outfile,overwrite=TRUE)
shapefile(tabdat,filename=outfile,overwrite=TRUE)
fls <- list.files()
for(i in 1:length(fls)){
print(i)
tabdat <- read.table(fls[i],sep = ",")
coordinates(tabdat) <- ~V3+V2
projection(tabdat) <- WGS84
outfile <- paste0(od,"/",strsplit(fls[i],".txt")[[1]],".shp")
shapefile(tabdat,filename=outfile,overwrite=TRUE)
}
wd <- "R:/Projects/HP00000 - Projects/HP00158 - Urban Gulls South Wales Cardiff/500 - Data Processing/2021 - Month 05 - Survey 01/GPS/Streampix/D01/C1/Set 2"
od <- "R:/Projects/HP00000 - Projects/HP00158 - Urban Gulls South Wales Cardiff/500 - Data Processing/2021 - Month 05 - Survey 01/GPS/Streampix/D01/C1/Set2Shapes"
setwd(wd)
fls <- list.files()
for(i in 1:length(fls)){
print(i)
tabdat <- read.table(fls[i],sep = ",")
coordinates(tabdat) <- ~V3+V2
projection(tabdat) <- WGS84
outfile <- paste0(od,"/",strsplit(fls[i],".txt")[[1]],".shp")
shapefile(tabdat,filename=outfile,overwrite=TRUE)
}
X <- readxl::read_xlsx("Data/Forthwind - displacement - seasonal mean peaks.xlsx")
Disp.Matrix <- function(Species,Season,SMP,writexlsx=TRUE,outdir=NULL){
colvals <- c(0,0.01,0.02,0.03,0.04,0.05,0.1,0.15,0.20,0.3,0.5,0.8,1)
rowvals <- seq(0,1,by=.1)
dismat <- matrix(ncol=13,nrow=11)
for(i in 1:length(colvals)){
for(j in 1:length(rowvals)){
dismat[j,i] <- ceiling(SMP * colvals[i] * rowvals[j])
}
}
dismat <- data.frame(dismat)
names(dismat) <- paste0(colvals*100,"%")
rownames(dismat) <- paste0(rowvals*100,"%")
### Write out xlsx file if true
if(writexlsx){
if(outdir==NULL){stop("output directory is NULL, please define outdir")}
filen <- paste0(outdir,"/",Species,"_",Season,".xlsx")
openxlsx::write.xlsx(dismat,filen,row.names=T)
}
return(dismat)
}
Kittwake_Breeding <- Disp.Matrix("Kittiwake","Breeding",2500,writexlsx=TRUE,outdir="C:/Temp/")
Disp.Matrix <- function(Species,Season,SMP,writexlsx=TRUE,outdir=NULL){
colvals <- c(0,0.01,0.02,0.03,0.04,0.05,0.1,0.15,0.20,0.3,0.5,0.8,1)
rowvals <- seq(0,1,by=.1)
dismat <- matrix(ncol=13,nrow=11)
for(i in 1:length(colvals)){
for(j in 1:length(rowvals)){
dismat[j,i] <- ceiling(SMP * colvals[i] * rowvals[j])
}
}
dismat <- data.frame(dismat)
names(dismat) <- paste0(colvals*100,"%")
rownames(dismat) <- paste0(rowvals*100,"%")
### Write out xlsx file if true
if(writexlsx){
browser()
if(outdir==NULL){stop("output directory is NULL, please define outdir")}
filen <- paste0(outdir,"/",Species,"_",Season,".xlsx")
openxlsx::write.xlsx(dismat,filen,row.names=T)
}
return(dismat)
}
Kittwake_Breeding <- Disp.Matrix("Kittiwake","Breeding",2500,writexlsx=TRUE,outdir="C:/Temp/")
outdir
if(outdir==NULL)
{}
outdir
Disp.Matrix <- function(Species,Season,SMP,writexlsx=TRUE,outdir=NULL){
colvals <- c(0,0.01,0.02,0.03,0.04,0.05,0.1,0.15,0.20,0.3,0.5,0.8,1)
rowvals <- seq(0,1,by=.1)
dismat <- matrix(ncol=13,nrow=11)
for(i in 1:length(colvals)){
for(j in 1:length(rowvals)){
dismat[j,i] <- ceiling(SMP * colvals[i] * rowvals[j])
}
}
dismat <- data.frame(dismat)
names(dismat) <- paste0(colvals*100,"%")
rownames(dismat) <- paste0(rowvals*100,"%")
### Write out xlsx file if true
if(writexlsx){
if(outdir==NULL){
stop("output directory is NULL, please define outdir")
}else{
filen <- paste0(outdir,"/",Species,"_",Season,".xlsx")
openxlsx::write.xlsx(dismat,filen,row.names=T)
}
}
return(dismat)
}
Kittwake_Breeding <- Disp.Matrix("Kittiwake","Breeding",2500,writexlsx=TRUE,outdir="C:/Temp/")
Kittwake_Breeding <- Disp.Matrix("Kittiwake","Breeding",2500,writexlsx=TRUE)
Disp.Matrix <- function(Species,Season,SMP,writexlsx=TRUE,outdir=NULL){
colvals <- c(0,0.01,0.02,0.03,0.04,0.05,0.1,0.15,0.20,0.3,0.5,0.8,1)
rowvals <- seq(0,1,by=.1)
dismat <- matrix(ncol=13,nrow=11)
for(i in 1:length(colvals)){
for(j in 1:length(rowvals)){
dismat[j,i] <- ceiling(SMP * colvals[i] * rowvals[j])
}
}
dismat <- data.frame(dismat)
names(dismat) <- paste0(colvals*100,"%")
rownames(dismat) <- paste0(rowvals*100,"%")
### Write out xlsx file if true
if(writexlsx){
if(is.null(outdir)){
stop("output directory is NULL, please define outdir")
}else{
filen <- paste0(outdir,"/",Species,"_",Season,".xlsx")
openxlsx::write.xlsx(dismat,filen,row.names=T)
}
}
return(dismat)
}
Kittwake_Breeding <- Disp.Matrix("Kittiwake","Breeding",2500,writexlsx=TRUE,outdir="C:/Temp/")
Kittwake_Breeding
library(HiDef)
devtools::document()
library(HiDef)
remove(Disp.Matrix())
remove(Disp.Matrix
)
library(HiDef)
Kittwake_Breeding
devtools::document()
library(HiDef)
!dir.exists("C:/poop")
create_batch_spreadsheet <- function(path, Zone, shape, outdir){
## Looks for the 500 Data Processing folder in the path...
if(!dir.exists(paste0(path,'/500 - Data Processing'))){stop("500 data processing cannot be found")}
## Lists all folders that follow a xxxx - Month structure
SurvList <- list.files(path=paste0(path,"500 - Data Processing/"),
pattern="\\d{4} - Month")
## Loops through the list of files and creates the character strings to populate the spreadsheet
outdf <- foreach(i=1:length(SurvList),.combine="rbind")%do%{
x <- SurvList[i]
yr <- substr(x,3,4)
mn <- substr(x,14,15)
sv <- substr(x,26,27)
projnm <- paste0("Zone",Zone,"_M",mn,"_S",sv,"_D01_",yr)
dfo <- data.frame("Shapefile location" = paste0(path,"/500 - Data Processing/",
SurvList[i],"/Density Estimates/Shapefile"),
"Shapefile Name" = shape,
"Project Name" = projnm
)
}
names(outdf) <- c("Shapefile location","Shapefile Name","Project Name")
## Creates the output name and writes out CSV
outcsv <- paste0(outdir,"/Zone",Zone,"_DAT_batch.csv")
write.csv(outdf,outcsv,row.names=F)
}
create_batch_spreadsheet(BaseDir,Zone,shpnm,"C:/Temp/")
BaseDir <- "R:/Projects/HP00000 - Projects/HP00104 - Seagreen Phase 2 and 3/"
Zone <- "85"
shpnm <- "Seagreen_Phase_2_and_3_16_km_buffer_WGS84.shp"
create_batch_spreadsheet(BaseDir,Zone,shpnm,"C:/Temp/")
library(foreach)
create_batch_spreadsheet(BaseDir,Zone,shpnm,"C:/Temp/")
library(HiDef)
create_batch_spreadsheet(path = "R:/Projects/HP00000 - Projects/HP00104 - Seagreen Phase 2 and 3/",
Zone = "85", shape = "Seagreen_Phase_2_and_3_16_km_buffer_WGS84.shp",outdir = "C:/Temp/")
create_batch_spreadsheet(path = "R:/Projects/HP00000 - Projects/HP00104 - Seagreen Phase 2 and 3/",
Zone = "85", shape = "Seagreen_Phase_2_and_3_16_km_buffer_WGS84.shp",outdir = "D:/TEST/")
create_batch_spreadsheet(path = "R:/Projects/HP00000 - Projects/HP00095 - Equinor Dudgeon and Sheringham Shoal extensions/",
Zone = "85", shape = "BirdSurveyArea_20180420_extended_4km_buffer_WGS84.shp",outdir = "R:/Projects/HP00000 - Projects/HP00095 - Equinor Dudgeon and Sheringham Shoal extensions/")
HiDef::create_batch_spreadsheet(path = "R:/Projects/HP00000 - Projects/HP00095 - Equinor Dudgeon and Sheringham Shoal extensions/",
Zone = "85", shape = "BirdSurveyArea_20180420_extended_4km_buffer_WGS84.shp",outdir = "R:/Projects/HP00000 - Projects/HP00095 - Equinor Dudgeon and Sheringham Shoal extensions/")
devtools::install_github("HiDef-Aerial-Surveying/HiDef", auth_token="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")
HiDef::create_batch_spreadsheet(path = "R:/Projects/HP00000 - Projects/HP00095 - Equinor Dudgeon and Sheringham Shoal extensions/",
Zone = "85", shape = "BirdSurveyArea_20180420_extended_4km_buffer_WGS84.shp",outdir = "R:/Projects/HP00000 - Projects/HP00095 - Equinor Dudgeon and Sheringham Shoal extensions/")
devtools::document()
devtools::document()
library(HiDef)
HiDef::create_batch_spreadsheet(path = "R:/Projects/HP00000 - Projects/HP00095 - Equinor Dudgeon and Sheringham Shoal extensions/",
Zone = "85", shape = "BirdSurveyArea_20180420_extended_4km_buffer_WGS84.shp",outdir = "R:/Projects/HP00000 - Projects/HP00095 - Equinor Dudgeon and Sheringham Shoal extensions/")
HiDef::create_batch_spreadsheet(path = "R:/Projects/HP00000 - Projects/HP00095 - Equinor Dudgeon and Sheringham Shoal extensions/",
Zone = "67", shape = "BirdSurveyArea_20180420_extended_4km_buffer_WGS84.shp",outdir = "R:/Projects/HP00000 - Projects/HP00095 - Equinor Dudgeon and Sheringham Shoal extensions/")
library(HiDef)
devtools::document()
library(HiDef)
usethis::use_package("tidyverse")
usethis::use_package("tidyverse",type="depends")
library(hexSticker)
library(showtext)
font_add_google("Roboto")
showtext_auto()
sticker("D:/HC0054 - MSS update to sCRM/300 - Technical/mCRM/inst/app/www/HD.png",package="HiDef",p_size=20,s_x=1,s_y=0.75,s_width=0.6,
filename="hexSticker_stochLAB.png",p_family = "Roboto",
h_fill = "#447fea",spotlight = TRUE,l_y = 1.2,l_x=1.5,h_color = "black")
usethis::use_version()
usethis::use_version()
usethis::use_github()
usethis::pr_push()
usethis::use_package("foreach")
usethis::use_package("tidyverse",depends=TRUE)
usethis::use_package("tidyverse",type = "Depends")
usethis::use_package("sf")
devtools::document()
devtools::document()
devtools::document()
devtools::document()
library(HiDef)
HiDef::LatLonToUTMEPSGCode(-91,179)
x <- runif(1:100)
x
x <- runif(100,10,1000)
x
sd(x)
stderr(x)
??stderr
pracma::std_err(x)
sd(x)/mean(x)
pracma::std_err(x)/mean(x)
tibble
test <- tibble(-)
data.frame(x=c(1:100),y=c(101:200))
t <- data.frame(x=c(1:100),y=c(101:200))
class(t)
tt <- tibble(t)
tt
class(tt)
"data.frame" %in% class(tt)
"data.frme" %in% class(tt)
test <- c("a","b","c","d")
c("a","C","c") %in% test
blah <- c("a","C","c") %in% test
any(blah)
!any(blah)
blah <- c("a","c") %in% test
!any(blah)
all(blah)
blah <- c("a","C","c") %in% test
all(blah)
devtools::document()
usethis::use_version()
usethis::use_version("minor")
library(HiDef)
detach("package:HiDef", unload = TRUE)
